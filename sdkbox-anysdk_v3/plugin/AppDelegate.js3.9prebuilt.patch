--- AppDelegate.cpp	2015-12-07 17:57:56.000000000 +0800
+++ AppDelegate.cpp	2015-12-07 18:19:58.000000000 +0800
@@ -11,12 +11,19 @@
 #else
 #include "js_module_register.h"
 #endif
+#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID || CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
+#include "AgentManager.h"
+#include "jsb_anysdk_protocols_auto.hpp"
+#include "manualanysdkbindings.hpp"
+using namespace anysdk::framework;
+#endif
 
 USING_NS_CC;
 using namespace CocosDenshion;
 
 AppDelegate::AppDelegate()
 {
+    
 }
 
 AppDelegate::~AppDelegate()
@@ -28,6 +35,10 @@
     // NOTE:Please don't remove this call if you want to debug with Cocos Code IDE
     RuntimeEngine::getInstance()->end();
 #endif
+    
+#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID || CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
+    AgentManager::getInstance()->unloadAllPlugins();
+#endif
 }
 
 //if you want a different context,just modify the value of glContextAttrs
@@ -43,6 +54,22 @@
 
 bool AppDelegate::applicationDidFinishLaunching()
 {
+#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID || CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
+    /**
+    * appKey、appSecret、privateKey需要从打包工具中游戏管理界面获取，替换
+    * oauthLoginServer参数是游戏服务提供的用来做登陆验证转发的接口地址。
+    */
+    std::string oauthLoginServer = "OAUTH_LOGIN_SERVER";
+    std::string appKey = "APP_KEY";
+    std::string appSecret = "APP_SERCRET";
+    std::string privateKey = "PRIVATE_KEY";
+    
+    AgentManager* pAgent = AgentManager::getInstance();
+    pAgent->init(appKey,appSecret,privateKey,oauthLoginServer);
+    
+    //使用框架中代理类进行插件初始化
+    pAgent->loadAllPlugins();
+#endif
     // initialize director
     auto director = Director::getInstance();
 
@@ -75,6 +102,10 @@
 #if defined(COCOS2D_DEBUG) && (COCOS2D_DEBUG > 0)
     sc->enableDebugger();
 #endif
+#if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID || CC_TARGET_PLATFORM == CC_PLATFORM_IOS)
+    sc->addRegisterCallback(register_all_anysdk_framework);
+    sc->addRegisterCallback(register_all_anysdk_manual);
+#endif
     ScriptEngineProtocol *engine = ScriptingCore::getInstance();
     ScriptEngineManager::getInstance()->setScriptEngine(engine);
     ScriptingCore::getInstance()->runScript("main.js");
