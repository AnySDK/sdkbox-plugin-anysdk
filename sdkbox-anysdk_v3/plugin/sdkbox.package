#Android
if sdkbox.android_has_key_value(sdkbox.APPLICATION, 'APP_STL', 'c++_static'):
    sdkbox.copy_files('android/protocols_c++_static', PLUGIN_PATH, ANDROID_PROJECT_DIR,{'protocols_c++_static':'protocols'})

if sdkbox.android_has_key_value(sdkbox.APPLICATION, 'APP_STL', 'gnustl_static'):
    sdkbox.copy_files('android/protocols_gnustl_static', PLUGIN_PATH, ANDROID_PROJECT_DIR,{'protocols_gnustl_static':'protocols'})

if sdkbox.android_has_key_value(sdkbox.APPLICATION, 'APP_STL', 'stlport_static'):
    sdkbox.copy_files('android/protocols_stlport_static', PLUGIN_PATH, ANDROID_PROJECT_DIR,{'protocols_stlport_static':'protocols'})

if COCOS_ENGINE_TYPE == 'prebuilt':
    sdkbox.copy_files('protocols/android/libPluginProtocol.jar', ANDROID_PROJECT_DIR, ANDROID_PROJECT_DIR + 'jars/')
else:
    sdkbox.copy_files('protocols/android/libPluginProtocol.jar', ANDROID_PROJECT_DIR, ANDROID_PROJECT_DIR + 'libs/')
sdkbox.copy_files(['protocols/res/drawable/btn_close.png', 'protocols/res/drawable/ui_ad.png'], ANDROID_PROJECT_DIR, ANDROID_PROJECT_DIR + 'res/drawable/')
sdkbox.copy_files('protocols/res/values-en/plugin_string.xml', ANDROID_PROJECT_DIR, ANDROID_PROJECT_DIR + 'res/values-en/')
sdkbox.copy_files('protocols/res/values/plugin_string.xml', ANDROID_PROJECT_DIR, ANDROID_PROJECT_DIR + 'res/values/')
sdkbox.copy_files(['protocols/res/layout/plugin_ads.xml', 'protocols/res/layout/plugin_login.xml'], ANDROID_PROJECT_DIR, ANDROID_PROJECT_DIR + 'res/layout/')

sdkbox.android_add_static_libraries(['PluginProtocolStatic'])

sdkbox.android_add_calls(['import-add-path, $(LOCAL_PATH)/..', 'import-module,protocols/android'])

sdkbox.android_set_permissions(['INTERNET', 'ACCESS_NETWORK_STATE', 'ACCESS_WIFI_STATE', 'RESTART_PACKAGES', 'KILL_BACKGROUND_PROCESSES'])

#iOS
if IOS_PROJECT_DIR != 'n/a':
    if sdkbox.xcode_get_build_setting() == 'libc++':
        sdkbox.copy_files('ios/protocols_libc++', PLUGIN_PATH, IOS_PROJECT_DIR,{'protocols_libc++':'protocols'})    
    else:
        sdkbox.copy_files('ios/protocols_libstdc++', PLUGIN_PATH, IOS_PROJECT_DIR,{'protocols_libstdc++':'protocols'})

    sdkbox.xcode_add_folders(IOS_PROJECT_DIR + 'protocols')

    sdkbox.xcode_add_frameworks(['CFNetwork.framework', 'CoreFoundation.framework', 'MobileCoreServices.framework', 'SystemConfiguration.framework', 'MediaPlayer.framework', 'GameController.framework', 'Security.framework', 'libz.dylib' ])

    sdkbox.xcode_add_linker_flags('-ObjC')

suffix = 'Tutorial'
if COCOS_PROJECT_TYPE == 'cpp':
    suffix = 'Cpp' + suffix
    if sdkbox.satisfies_cocos_version('3.0','3.2'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.cpp3.0.patch', root=COCOS_CLASSES_DIR)
    elif sdkbox.satisfies_cocos_version('3.3','3.4'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.cpp3.3.patch', root=COCOS_CLASSES_DIR)
    elif sdkbox.satisfies_cocos_version('3.5','3.6'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.cpp3.5.patch', root=COCOS_CLASSES_DIR)
    elif sdkbox.satisfies_cocos_version('3.7'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.cpp3.7.patch', root=COCOS_CLASSES_DIR)
    sdkbox.apply_patch(ANDROID_ACTIVITY_PATH + ANDROID_ACTIVITY_NAME + '.java', 'AppActivity.cpp.patch', root=ANDROID_ACTIVITY_PATH)

    if sdkbox.satisfies_cocos_version('3.7'):
        sdkbox.apply_patch(ANDROID_JNI_DIR + 'hellocpp/main.cpp', 'main.cpp3.7.patch', root=ANDROID_JNI_DIR + 'hellocpp/')
    elif sdkbox.satisfies_cocos_version('3.3','3.6'):
        sdkbox.apply_patch(ANDROID_JNI_DIR + 'hellocpp/main.cpp', 'main.cpp3.1.patch', root=ANDROID_JNI_DIR + 'hellocpp/')
    else:
        sdkbox.apply_patch(ANDROID_JNI_DIR + 'hellocpp/main.cpp', 'main.3.0.patch', root=ANDROID_JNI_DIR + 'hellocpp/')
        sdkbox.apply_patch(ANDROID_COCOS_PACKAGE_ROOT + '../javaactivity.cpp', 'javaactivity.cpp.patch', root=ANDROID_COCOS_PACKAGE_ROOT + '../')

#JS
if COCOS_PROJECT_TYPE == 'js':
    suffix = 'Js' + suffix
    if sdkbox.satisfies_cocos_version('3.0','3.4'):
        sdkbox.copy_files(['jsbindings/3.x/autoanysdkbindings.cpp', 'jsbindings/3.x/autoanysdkbindings.hpp', 'jsbindings/3.x/manualanysdkbindings.cpp', 'jsbindings/3.x/manualanysdkbindings.hpp'], PLUGIN_PATH, COCOS_CLASSES_DIR)
        android_js_sources = ['../../Classes/manualanysdkbindings.cpp', '../../Classes/autoanysdkbindings.cpp']
        ios_js_sources = ['manualanysdkbindings.cpp', 'Classes/autoanysdkbindings.cpp']
        sdkbox.android_add_sources(android_js_sources)
        sdkbox.xcode_add_sources(ios_js_sources)

    if sdkbox.satisfies_cocos_version('3.5'):
        sdkbox.copy_files(['jsbindings/3.5/jsb_anysdk_basic_conversions.cpp', 'jsbindings/3.5/jsb_anysdk_basic_conversions.h', 'jsbindings/3.5/manualanysdkbindings.cpp', 'jsbindings/3.5/manualanysdkbindings.hpp', 'jsbindings/3.5/jsb_anysdk_protocols_auto.cpp', 'jsbindings/3.5/jsb_anysdk_protocols_auto.hpp'], PLUGIN_PATH, COCOS_CLASSES_DIR)
        android_js_sources = ['../../Classes/jsb_anysdk_basic_conversions.cpp', '../../Classes/manualanysdkbindings.cpp', '../../Classes/jsb_anysdk_protocols_auto.cpp']
        ios_js_sources = ['jsb_anysdk_basic_conversions.cpp', 'manualanysdkbindings.cpp', 'jsb_anysdk_protocols_auto.cpp']
        if IOS_PROJECT_DIR != 'n/a':
            sdkbox.xcode_add_sources(ios_js_sources)
        sdkbox.android_add_sources(android_js_sources)

    sdkbox.copy_files('jsbindings/anysdkConst.js', PLUGIN_PATH, COCOS_PROJECT_DIR + 'src/')

    if sdkbox.satisfies_cocos_version('3.0','3.0'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.js3.0.patch', root=COCOS_CLASSES_DIR)
    elif sdkbox.satisfies_cocos_version('3.1','3.1'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.js3.2.patch', root=COCOS_CLASSES_DIR)
    elif sdkbox.satisfies_cocos_version('3.2','3.2'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.js3.3.patch', root=COCOS_CLASSES_DIR)
    elif sdkbox.satisfies_cocos_version('3.3','3.3'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.js3.4.patch', root=COCOS_CLASSES_DIR)
    elif sdkbox.satisfies_cocos_version('3.5','3.5'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.js3.5.patch', root=COCOS_CLASSES_DIR)
    elif sdkbox.satisfies_cocos_version('3.6','3.6'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.js3.6.patch', root=COCOS_CLASSES_DIR)
    elif sdkbox.satisfies_cocos_version('3.7','3.7'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.js3.7.patch', root=COCOS_CLASSES_DIR)
    elif sdkbox.satisfies_cocos_version('3.8'):
        if COCOS_ENGINE_TYPE == 'prebuilt':
            sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.js3.9prebuilt.patch', root=COCOS_CLASSES_DIR)
        else:
            sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.js3.8.patch', root=COCOS_CLASSES_DIR)


    if sdkbox.satisfies_cocos_version('3.8'):
        if COCOS_ENGINE_TYPE == 'prebuilt':
            sdkbox.apply_patch(ANDROID_ACTIVITY_PATH + ANDROID_ACTIVITY_NAME + '.java', 'AppActivity.js3.9prebuilt.patch', root=ANDROID_ACTIVITY_PATH)
    else:
        sdkbox.apply_patch(ANDROID_ACTIVITY_PATH + ANDROID_ACTIVITY_NAME + '.java', 'AppActivity.js.patch', root=ANDROID_ACTIVITY_PATH)

    if sdkbox.satisfies_cocos_version('3.8'):
        if COCOS_ENGINE_TYPE == 'prebuilt':
            sdkbox.apply_patch(ANDROID_JNI_DIR + 'hellojavascript/main.cpp', 'main.js3.9prebuilt.patch', root=ANDROID_JNI_DIR + 'hellojavascript/')
    elif sdkbox.satisfies_cocos_version('3.7'):
        sdkbox.apply_patch(ANDROID_JNI_DIR + 'hellojavascript/main.cpp', 'main.cpp3.7.patch', root=ANDROID_JNI_DIR + 'hellojavascript/')
    elif sdkbox.satisfies_cocos_version('3.1','3.6'):
        sdkbox.apply_patch(ANDROID_JNI_DIR + 'hellojavascript/main.cpp', 'main.cpp3.1.patch', root=ANDROID_JNI_DIR + 'hellojavascript/')
    else:
        sdkbox.apply_patch(ANDROID_JNI_DIR + 'hellojavascript/main.cpp', 'main.3.0.patch', root=ANDROID_JNI_DIR + 'hellojavascript/')
        sdkbox.apply_patch(ANDROID_COCOS_PACKAGE_ROOT + '../javaactivity.cpp', 'javaactivity.cpp.patch', root=ANDROID_COCOS_PACKAGE_ROOT + '../')

#Lua
if COCOS_PROJECT_TYPE == 'lua':
    suffix = 'Lua' + suffix
    sdkbox.copy_files(['luabindings/anysdk_manual_bindings.cpp', 'luabindings/anysdk_manual_bindings.h', 'luabindings/anysdkbindings.cpp', 'luabindings/anysdkbindings.h'], PLUGIN_PATH, COCOS_CLASSES_DIR)
    android_lua_sources = ['../../Classes/anysdk_manual_bindings.cpp', '../../Classes/anysdkbindings.cpp']
    ios_lua_sources = ['anysdk_manual_bindings.cpp', 'anysdkbindings.cpp']
    sdkbox.android_add_sources(android_lua_sources)
    if IOS_PROJECT_DIR != 'n/a':
        sdkbox.xcode_add_sources(ios_lua_sources)
    if sdkbox.satisfies_cocos_version('3.0','3.4'):
    	sdkbox.copy_files('luabindings/anysdkConst.lua', PLUGIN_PATH, COCOS_PROJECT_DIR + 'src/')
    if sdkbox.satisfies_cocos_version('3.5'):
    	sdkbox.copy_files('luabindings/anysdkConst3.5.lua', PLUGIN_PATH, COCOS_PROJECT_DIR + 'src/', {'anysdkConst3.5.lua':'anysdkConst.lua'})

    if sdkbox.satisfies_cocos_version('3.0','3.0'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.lua3.0.patch', root=COCOS_CLASSES_DIR)
    elif sdkbox.satisfies_cocos_version('3.2','3.2'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.lua3.2.patch', root=COCOS_CLASSES_DIR)
    elif sdkbox.satisfies_cocos_version('3.3','3.3'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.lua3.3.patch', root=COCOS_CLASSES_DIR)
    elif sdkbox.satisfies_cocos_version('3.4','3.4'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.lua3.4.patch', root=COCOS_CLASSES_DIR)
    elif sdkbox.satisfies_cocos_version('3.5','3.5'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.lua3.5.patch', root=COCOS_CLASSES_DIR)
    elif sdkbox.satisfies_cocos_version('3.6','3.6'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.lua3.6.patch', root=COCOS_CLASSES_DIR)
    elif sdkbox.satisfies_cocos_version('3.7','3.7'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.lua3.7.patch', root=COCOS_CLASSES_DIR)
    elif sdkbox.satisfies_cocos_version('3.8'):
        sdkbox.apply_patch(COCOS_CLASSES_DIR + 'AppDelegate.cpp', 'AppDelegate.lua3.8.patch', root=COCOS_CLASSES_DIR)

    if sdkbox.satisfies_cocos_version('3.8'):
        if COCOS_ENGINE_TYPE == 'prebuilt':
                sdkbox.apply_patch(ANDROID_ACTIVITY_PATH + ANDROID_ACTIVITY_NAME + '.java', 'AppActivity.lua3.9prebuilt.patch', root=ANDROID_ACTIVITY_PATH)
    else:
        sdkbox.apply_patch(ANDROID_ACTIVITY_PATH + ANDROID_ACTIVITY_NAME + '.java', 'AppActivity.lua.patch', root=ANDROID_ACTIVITY_PATH)
    if sdkbox.satisfies_cocos_version('3.5','3.5'):
        sdkbox.apply_patch(ANDROID_JNI_DIR + 'hellolua/main.cpp', 'main.lua.3.5.patch', root=ANDROID_JNI_DIR + 'hellolua/')
    elif sdkbox.satisfies_cocos_version('3.3'):
        sdkbox.apply_patch(ANDROID_JNI_DIR + 'hellolua/main.cpp', 'main.lua.patch', root=ANDROID_JNI_DIR + 'hellolua/')
    else:
        sdkbox.apply_patch(ANDROID_JNI_DIR + 'hellolua/main.cpp', 'main.3.0.patch', root=ANDROID_JNI_DIR + 'hellolua/')
        sdkbox.apply_patch(ANDROID_COCOS_PACKAGE_ROOT + '../javaactivity.cpp', 'javaactivity.cpp.patch', root=ANDROID_COCOS_PACKAGE_ROOT + '../')

url = 'http://docs.anysdk.com/' + suffix
sdkbox.puts('Please reference the online documentation to finish the integration:\n' + url)
sdkbox.open_documentation(url)
   	
